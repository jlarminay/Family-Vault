// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String
  provider String
  avatar   String?

  comments       Comment[] // can have many comments
  uploadedVideos Video[] // can upload many videos
  likes          Like[] // can have many likes
  Report         Report[] // can report many videos
}

model Person {
  id        Int       @id @default(autoincrement())
  name      String
  gender    String?
  image     String?
  birthday  DateTime? @db.Date
  deathday  DateTime? @db.Date
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  videos    Video[] // can be in many videos
}

model Video {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  ownerId     Int
  videoId     Int
  thumbnailId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner     User      @relation(fields: [ownerId], references: [id])
  video     File      @relation(name: "VideoVideo", fields: [videoId], references: [id])
  thumbnail File      @relation(name: "VideoThumbnail", fields: [thumbnailId], references: [id])
  comments  Comment[] // can have many comments
  persons   Person[] // can contain many people
  likes     Like[] // can have multiple likes
  Report    Report[] // can be reported multiple times
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id])

  // user can only like video once
  @@unique([userId, videoId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id])
}

model Report {
  id        Int      @id @default(autoincrement())
  report    String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  videoId   Int
  video     Video    @relation(fields: [videoId], references: [id])
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  path      String   @unique
  type      String
  size      Int
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video     Video[] @relation(name: "VideoVideo")
  thumbnail Video[] @relation(name: "VideoThumbnail")
}
