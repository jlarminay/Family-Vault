name: Deploy to Testing Server

on:
  workflow_dispatch:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: testing
    defaults:
      run:
        working-directory: .infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Set up Python for Ansible
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Terraform envsubst
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          DO_TOKEN: ${{ secrets.DO_TOKEN }}
          DO_PROJECT_ID: ${{ secrets.DO_PROJECT_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_EMAIL: ${{ secrets.CF_EMAIL }}
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          DOMAIN: ${{ vars.DOMAIN }}
        with:
          files: |
            .infrastructure/terraform/terraform.tfvars

      - name: Terraform Init
        id: terraform
        run: |
          cd terraform
          terraform init \
            -backend-config="access_key=${{ secrets.DO_SPACES_ACCESS }}" \
            -backend-config="secret_key=${{ secrets.DO_SPACES_SECRET }}"
          terraform workspace select -or-create ${{ vars.ENVIRONMENT }}
          terraform apply --auto-approve
          echo "VOLUME_NAME=$(terraform output -raw volume_name)" >> $GITHUB_OUTPUT
          echo "DROPLET_IP=$(terraform output -raw droplet_ip)" >> $GITHUB_OUTPUT

      - name: Replace file variables
        uses: tvarohohlavy/inplace-envsubst-action@v1.0.0
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
          DOMAIN: ${{ vars.DOMAIN }}
          VOLUME_NAME: ${{ steps.terraform.outputs.VOLUME_NAME }}
          DROPLET_IP: ${{ steps.terraform.outputs.DROPLET_IP }}
          WORKING_TMP_FOLDER: ${{ vars.WORKING_TMP_FOLDER }}
          # Database
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          # S3
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_ENDPOINT: ${{ secrets.S3_ENDPOINT }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          # Auths
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          AUTH_DISCORD_CLIENT_ID: ${{ secrets.AUTH_DISCORD_CLIENT_ID }}
          AUTH_DISCORD_CLIENT_SECRET: ${{ secrets.AUTH_DISCORD_CLIENT_SECRET }}
          AUTH_GITHUB_CLIENT_ID: ${{ secrets.AUTH_GITHUB_CLIENT_ID }}
          AUTH_GITHUB_CLIENT_SECRET: ${{ secrets.AUTH_GITHUB_CLIENT_SECRET }}
          AUTH_GOOGLE_CLIENT_ID: ${{ secrets.AUTH_GOOGLE_CLIENT_ID }}
          AUTH_GOOGLE_CLIENT_SECRET: ${{ secrets.AUTH_GOOGLE_CLIENT_SECRET }}
          # Webhooks
          WEBHOOK_DISCORD_URL: ${{ secrets.WEBHOOK_DISCORD_URL }}
        with:
          files: |
            .env.production
            Caddyfile
            .infrastructure/ansible/hosts.ini

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.terraform.outputs.DROPLET_IP }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          cd ansible
          export ANSIBLE_CONFIG=./ansible.cfg
          ansible-playbook playbook.yml
